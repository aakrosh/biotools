#!/usr/bin/env python

"""
    axt_randomize file.axt
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError
from random import shuffle

class Alignment:
    pass

def Axtalignment(file):
    """Return the next AXT block from the file.
    """
    line = file.readline()
    
    # ignore any whitespace at the beginning of the file
    while len(line.strip()) == 0 or line.startswith("#"): 
        line = file.readline()
        if not line: raise StopIteration

    while line:
        num_read = 0

        alignment = Alignment()
        indx,rname,rpos,rend,qname,qpos,qend,strand,score = line.strip().split()
        alignment.indx = int(indx)
        alignment.rname = rname
        alignment.rpos = int(rpos) - 1
        alignment.rend = int(rend)
        alignment.qname = qname
        alignment.qpos = int(qpos) - 1
        alignment.qend = int(qend)
        alignment.strand = strand
        alignment.score = int(score)
        
        line = file.readline()
        alignment.rtext = line.strip().upper()
    
        line = file.readline()
        alignment.qtext = line.strip().upper()
        
        yield alignment
        
        line = file.readline()
        while len(line.strip()) == 0:
            line = file.readline()
            if not line: raise StopIteration
       
    raise StopIteration

def Axtstring(aln):
    string = ""
    string += "%d %s %d %d %s %d %d %s %d\n" % (aln.indx,aln.rname,aln.rpos+1,aln.rend,aln.qname,aln.qpos+1,aln.qend,aln.strand,aln.score)
    string += "%s\n" % aln.rtext
    string += "%s\n" % aln.qtext
    return string

axtindex = 0

def ProcessAlignments(alignments):
    shuffle(alignments)
    
    global axtindex 
    for alignment in alignments:
        alignment.indx = axtindex
        print Axtstring(alignment)
        axtindex += 1

def main(filename):
    file = open(filename, "r")

    lastname2  = None
    alignments = []
    indx = 0

    for alignment in Axtalignment(file):
        assert alignment.indx == indx
        assert alignment.rpos >= 0
        assert alignment.rend >= alignment.rpos
        assert alignment.qpos >= 0
        assert alignment.qend >= alignment.qpos
        assert alignment.strand in ["+","-"]
        assert alignment.score > 0

        if alignment.qname == lastname2:
            alignments.append(alignment)
        else:
            if lastname2 == None:
                alignments.append(alignment)
            else:
                print >> stderr, "Processing %d alignments for %s" % (len(alignments), lastname2)
                ProcessAlignments(alignments)
                alignments = [alignment]

        lastname2 = alignment.qname
        indx += 1
        
    if lastname2 != None:
        print >> stderr, "Processing %d alignments for %s" % (len(alignments), lastname2)
        ProcessAlignments(alignments)


    file.close()

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hd",["help", "debug"])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__
        exit(2) 

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        else:
            assert False, "unhandled option"

    if len(args) != 1:
        print >> stderr, __doc__
        exit(3)

    main(args[0])
