#!/usr/bin/env python

"""
Input : Alignments in the AXT format
        Query file in fasta format
Output: Alignment file which can be used in the links.conf with circos
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError

from fasta import *

__author__ = "Aakrosh Ratan"
__email__  = "ratan@bx.psu.edu"

# do we want the debug information to be printed?
debug_flag = False

class Block:
    pass

def AxtBlock(filename):
    file = open(filename, "r")
    line = file.readline()
    
    # ignore any whitespace at the beginning of the file
    while len(line.strip()) == 0 or line.startswith("#"):
        line = file.readline()
        if not line: raise StopIteration

    while line:
        num_read = 0

        block = Block()
        indx,rname,rpos,rend,qname,qpos,qend,strand,score = line.strip().split()
        block.indx = int(indx)
        block.rname = rname
        block.rpos = int(rpos)
        block.rend = int(rend)
        block.qname = qname
        block.qpos = int(qpos)
        block.qend = int(qend)
        block.strand = strand
        block.score = int(score)
        
        line = file.readline()
        block.rtext = line.strip().upper()
    
        line = file.readline()
        block.qtext = line.strip().upper()
        
        yield block
        
        line = file.readline()
        while len(line.strip()) == 0:
            line = file.readline()
            if not line: raise StopIteration
        
    raise StopIteration

def ReadSizes(filename):
    records = fasta(filename)
    sizes   = {}

    for r in records:
        s = r.fastasequence
        sizes[s.name.split()[0]] = len(s.seq)

    records.close()
    return sizes

def main(query_name, alignment_name):
    # read the sizes of the query files
    sizes = ReadSizes(query_name)

    for block in AxtBlock(alignment_name):
        name1 = block.rname
        zstart1 = block.rpos - 1
        end1  = block.rend
        name2 = block.qname
        zstart2 = block.qpos - 1
        end2 = block.qend
        if block.strand == "-":
            zstart2 = sizes[name2] - block.qend
            end2 = sizes[name2] - block.qpos + 1

        print name1,zstart1,end1,name2,zstart2,end2
        
def usage():
    f = stderr
    print >> f, "usage:"
    print >> f, "axt_to_circos_alignments  [options] query.fa alignments.axt"
    print >> f, "where the options are:"
    print >> f, "-h,--help : print usage and quit"
    print >> f, "-d,--debug: print debug information"

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hd",["help", "debug"])
    except GetoptError, err:
        print str(err)
        usage()
        exit(2) 

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        else:
            assert False, "unhandled option"

    if len(args) != 2:
        usage()
        exit(3)

    main(args[0], args[1])
