#!/usr/bin/env python

"""
    usage:
        summarise_output [options] fdrcutoff outdir

    where the options are:
        -h,--help : print usage and quit
        -d,--debug: print debug information
        -l,--libraries: only summarise the libraries in the following file [all]
        -a,--all: print all results that pass threshold. 

    and the arguments are:

    fdrcutoff: the cutoff for the 'Adjusted P-value' in the tables
    outdir : the output directory to put results in

    By default only the top 10 results that pass thresholds are printed.
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError
from os import listdir

import json
import requests

__author__ = "Aakrosh Ratan"
__email__  = "ratan@virginia.edu"

# do we want the debug information to be printed?
debug_flag = False

def main(cutoff, outdir, libs, printall):
    for filename in listdir(outdir):
        vals = []
        with open("%s/%s" % (outdir,filename), 'r') as f:
            line = f.readline()
            tokens = line.strip().split("\t")
            assert tokens[0] == "Term"
            assert tokens[1] == "Overlap"
            assert tokens[3] == "Adjusted P-value"
            assert tokens[-1] == "Genes"
            for line in f:
                tokens = line.strip().split("\t")
                if float(tokens[3]) < cutoff:
                    padj = round(float(tokens[3]), 3)
                    val = str(padj)
                    vals.append((padj,[tokens[0],tokens[1],str(val),tokens[-1]]))
                    
                    

        vals.sort()
        output = ["\t"+"\t".join(y) for x,y in vals]
        if output and ((libs == None) or (filename[:-4] in libs)):
            print "%s:" % filename[:-4]
            if printall:
                print "\n".join(output)
            else:
                print "\n".join(output[:10])
                print "\t..."
            print ""   

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hdl:a",["help", "debug", "libraries=", "all"])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__
        exit(2) 

    libs = None
    printall = False

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-l", "--libraries"):
            libs = set()
            with open(a, 'r') as f:
                for line in f:
                    libs.add(line.strip())
        elif o in ("-a", "--all"):
            printall = True
        else:
            assert False, "unhandled option"

    if len(args) != 2:
        print >> stderr, __doc__
        exit(3)

    main(float(args[0]), args[1], libs, printall)
