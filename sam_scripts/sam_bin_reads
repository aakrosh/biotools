#!/usr/bin/env python

"""
Input : Alignments in SAM format
Output: Binned counts of sequences
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError
from math import ceil, floor

import pysam

__author__ = "Aakrosh Ratan"
__email__  = "ratan@bx.psu.edu"

# do we want the debug information to be printed?
debug_flag = False

def main(refname, samname, binsize):
    reffile = pysam.FastaFile(refname)
    samfile = pysam.AlignmentFile(samname, "rb")

    # create the bins
    chroms = []
    bins = {}
    for x in reffile.references:
        chroms.append(x)
        bins[x] = [0] * ceil(reffile.get_reference_length(x) * 1.0 / binsize)

    for read in samfile:
        if read.is_read1:
            indx = floor(read.reference_start * 1.0 / binsize)
            bins[read.get_reference_name(read.reference_id)][indx] += 1

    for chrom in chroms:
        start = 0
        end   = start + binsize
        for coverage in bins[chrom]:
            print start,end,coverage
            start = end 
            end   = start + binsize
    
def usage():
    f = stderr
    print >> f, "usage:"
    print >> f, "sam_bin_reads  [options] reference.fa alignments.sam"
    print >> f, "where the options are:"
    print >> f, "-h,--help : print usage and quit"
    print >> f, "-d,--debug: print debug information"
    print >> f, "-b,--binsize: the size of the bins to use [1,000,000 bps]"

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hdb:",["help", "debug", "binsize"])
    except GetoptError, err:
        print str(err)
        usage()
        exit(2) 

    binsize = 1000000

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-b", "--binsize"):
            binsize = int(a)
        else:
            assert False, "unhandled option"

    if len(args) != 2:
        usage()
        exit(3)

    main(args[0], args[1], binsize)
