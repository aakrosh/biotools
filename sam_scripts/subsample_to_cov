#!/usr/bin/env python

"""
    usage:
        subsample_to_cov [options] maxcov alignments.bam

    where the options are:
        -h,--help : print usage and quit
        -d,--debug: print debug information
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError
from random import random

import pysam

__author__ = "Aakrosh Ratan"
__email__  = "ratan@bx.psu.edu"

# do we want the debug information to be printed?
debug_flag = False

def main(maxcov, filename):
    positions = {}
    maxcovobserved = 0
    samfile = pysam.AlignmentFile(filename, "rb")
    for pileupcolumn in samfile.pileup(stepper = "all"):
        cov = 0
        for pileupread in pileupcolumn.pileups:
            if pileupread.is_head:
                cov += 1
        if cov > maxcovobserved: maxcovobserved = cov
        if cov > maxcov:
            key = "%d.%d" % (pileupcolumn.reference_id,pileupcolumn.pos)
            print >> stderr, "%s in positions with %d reads" % (key, cov)
            positions[key] = cov
    samfile.close()
    print >> stderr, "Highest cov observed: %d" % maxcovobserved
    
    samfile = pysam.AlignmentFile(filename, "rb")
    outfile = pysam.AlignmentFile(stdout, "wb", template=samfile)

    for read in samfile:
        if "%d.%d" % (read.tid,read.pos) in positions:
            cov = positions["%d.%d" % (read.tid,read.pos)]
            frac = maxcov * 1.0 / cov
            rnd = random()
            print >> stderr, "rand:%f, frac:%f" % (rnd, frac)
            if rnd < frac:
                outfile.write(read)
        else:
            outfile.write(read)

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hd",["help", "debug"])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__
        exit(2) 

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        else:
            assert False, "unhandled option"

    if len(args) != 2:
        print >> stderr, __doc__
        exit(3)

    main(int(args[0]), args[1])
